function [ OFDMSymS ] = Generate_OFDMSymbols( in )
% Генерирует поток OFDM символов из входного потока комплексных чисел
% GI не добавляется
%
% Выполнение близко к стандарту 802.11a (см. стр. +-1592, 802.11-2012):
%   - 64-точечное IFFT
%   - 4 поднесущих под пилот-сигналы
%   - 48 поднесущих под данные
% Из стандарта пренебрегли:
%   1) расширением на один отсчёт каждого OFDM символа
%     и умножение на оконную функию;
%   2) разными значениями пилотных поднесущих в зависимости
%     от порядкового номера OFDM символа в пакете
%
% in:
%   @in - массив-строка (поток) с комплексными числами (выход mapper),
%     количество должно быть кратно 48
%
% out:
%   @OFDMSymS - массив-строка (поток) с OFDM-символами;
%     каждый OFDM-символ - это 64 комплексных числа
%
        assert( ~mod(length(in), 48) );
        
        % Пилот символы (BPSK), см. стр. 1603 / 2556
        % ВНИМАНИЕ! В стандарте домножаются на коэффициент,
        % в зависимости от номера OFDM-символа в "пакете"
        pilots = [ 1, ... % ##  7
                  -1, ... % ##  21
                   1, ... % ## -21
                   1];    % ## -7
        
        N_OFDMSymS = length(in) / 48;
        
        % 2d массив с OFDM-символами
        % Одна строка массива - один OFDM-символ
        % Кол-во строк == кол-во OFDM-символов
        OFDMSymS = zeros(N_OFDMSymS, 64);
        
        for i = 0 : N_OFDMSymS - 1
                
                % Выделили 48 инф. символов из входного потока
                % для формирования одного OFDM-символа
                in_i = in( i * 48 + (1 : 48) );
                
                % Расстановка перед 64-точечным IFFT блоком
                in_ifft64 = [
                        0,             ... % NULL (постоянная составляющая) ## 0
                        ...
                        in_i(1 : 6),   ... % 6 символов  ##  1  -  6
                        pilots(1),     ... % пилот       ##  7
                        in_i(7 : 19),  ... % 13 символов ##  8  -  20
                        pilots(2),     ... % пилот       ##  21
                        in_i(20 : 24), ... % 5 символов  ##  22 -  26
                        ...
                        zeros(1, 5),   ... % NULL        ##  27 -  31
                        ...
                        zeros(1, 6),   ... % NULL        ## -32 - -27
                        ...
                        in_i(25 : 29), ... % 5 символов  ## -26 - -22
                        pilots(3),     ... % пилот       ## -21
                        in_i(30 : 42), ... % 13 символов ## -20 - -8
                        pilots(4),     ... % пилот       ## -7
                        in_i(43 : 48)  ... % 6 символов  ## -6  - -1
                        ];

                OFDMSymS(i + 1, :) = ifft(in_ifft64);
                
        end
        
        % 2d массив в массив-строку (поток)
        OFDMSymS = reshape(OFDMSymS.', 1, N_OFDMSymS * 64);
        
end

